/** Copyright 2010 David Escribano García
*
* Author: David Escribano García
* Director: Jesús Antonio Vega Sánchez (CIEMAT)
* Supervisor: Sebastián Dormido Canto (UNED)
*
* Licensed under the EUPL, Version 1.1 or - as soon they will be
* approved by the European Commission - subsequent versions of the
* EUPL (the "Licence"); you may not use this work except in
* compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://www.osor.eu/eupl/european-union-public-licence-eupl-v.1.1
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the Licence is distributed on an "AS
* IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied.
* See the Licence for the specific language governing permissions
* and limitations under the Licence.
*/

package es.davideg.uned.ii.proyecto.gui;

import es.davideg.uned.ii.proyecto.gui.lib.FileDrop;
import es.davideg.uned.ii.proyecto.ConfigurationManager;
import es.davideg.uned.ii.proyecto.video.Video;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;

/**
 * <p>Panel con la lista de video existentes en la base de datos.</p>
 * @author David Escribano García
 */
public class VideoPanel extends javax.swing.JPanel implements LocaleChangeListener
{
    private final Desktop desktop = Desktop.getDesktop();
    public static final String EVENT_CLICK = "videoTableMouseReleased";
    private static final Logger logger = Logger.getLogger(VideoPanel.class.getName());

    /** Crea un nuevo VideoPanel */
    public VideoPanel()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        videoTableMenu = new javax.swing.JPopupMenu();
        menuOpenVideo = new javax.swing.JMenuItem();
        menuOpenFolder = new javax.swing.JMenuItem();
        menuOpenImages = new javax.swing.JMenuItem();
        videoScroll = new javax.swing.JScrollPane();
        videoTable = new javax.swing.JTable();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("configuration/language"); // NOI18N
        menuOpenVideo.setText(bundle.getString("menu.videotable.openvideo")); // NOI18N
        menuOpenVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenVideoActionPerformed(evt);
            }
        });
        videoTableMenu.add(menuOpenVideo);

        menuOpenFolder.setText(bundle.getString("menu.videotable.openfolder")); // NOI18N
        menuOpenFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenFolderActionPerformed(evt);
            }
        });
        videoTableMenu.add(menuOpenFolder);

        menuOpenImages.setText(bundle.getString("menu.videotable.openimages")); // NOI18N
        menuOpenImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenImagesActionPerformed(evt);
            }
        });
        videoTableMenu.add(menuOpenImages);

        videoTable.setModel(new VideoTableModel());
        videoTable.setDefaultRenderer(Object.class, new VideoCellRenderer());
        videoTable.removeColumn(videoTable.getColumn("Video"));
        videoTable.removeColumn(videoTable.getColumn("Deleted"));
        videoTable.removeColumn(videoTable.getColumn("New"));
        videoTable.getColumnModel().getColumn(VideoTableModel.IMAGE_COLUMN).setPreferredWidth(20);
        videoTable.getColumnModel().getColumn(VideoTableModel.IMAGE_COLUMN).setMinWidth(20);
        videoTable.getColumnModel().getColumn(VideoTableModel.IMAGE_COLUMN).setMaxWidth(20);

        // Codigo para permitir arrastrar videos
        FileDrop.Listener fileDropListener =
        new FileDrop.Listener()
        {
            String[] extensions = ConfigurationManager.getProperty("video.extension").split(",");

            @Override
            public void filesDropped( java.io.File[] files )
            {
                if (VideoPanel.this.isEnabled())
                {
                    List<File> videos = new ArrayList();
                    for(File file : files)
                    {
                        for(String extension : extensions)
                        {
                            if (file.getName().endsWith(extension))
                            {
                                videos.add(file);
                                break;
                            }
                        }
                    }
                    addVideos(videos.toArray(new File[videos.size()]));
                    throwMouseEvent();
                }
            }
        };
        new FileDrop(null, this, fileDropListener);
        videoTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                videoTableMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                videoTableMouseClicked(evt);
            }
        });
        videoScroll.setViewportView(videoTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(videoScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 956, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(videoScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * <p>Establece los videos que se listan en el panel.</p>
     * <p>Esta lista de  videos debe corresponder con los videos que existen
     * en la base de datos ya que no quedan marcados para procesar.</p>
     * @param videos Lista de videos
     */
    public void setVideos(List<Video> videos)
    {
        VideoTableModel model = ((VideoTableModel)videoTable.getModel());
        model.clear();
        for (Video video : videos)
        {
            model.addRow(video);
        }
    }

    /**
     * <p>Añade nuevos videos al panel.</p>
     * <p>Los videos añadidos mediante este metodo quedan marcados para
     * añadir a la base de datos.</p>
     * @param files Lista de ficheros correspondientes a los videos
     */
    public void addVideos(File[] files)
    {
        VideoTableModel model = ((VideoTableModel)videoTable.getModel());
        for(java.io.File file : files)
        {
            model.addRow(new Video(file.getName(), file, null));
            model.setNew(model.getRowCount() - 1, true);
        }
    }

    /**
     * Abre el video que esta seleccionado con el programa predeterminado del
     * sistema operativo
     */
    public void openSelectedVideo()
    {
        try
        {
            VideoTableModel model = (VideoTableModel)videoTable.getModel();
            Video video = model.getVideo(videoTable.getSelectedRow());
            if ("Linux".equals(System.getProperty("os.name")))
                Runtime.getRuntime().exec(new String[] {"xdg-open", video.getFile().getAbsolutePath()});
            else
                desktop.open(video.getFile());   
        }
        catch (IOException ex)
        {
            logger.log(Level.SEVERE, "No se puede abrir el video seleccionado: {0}", ex.getMessage());
        }
    }

    /**
     * Abre una carpeta con el programa predeterminado del sistema operativo
     * @param folder Carpeta que se va a abrir
     */
    public void openFolder(File folder)
    {
        try
        {
            desktop.open(folder);
        }
        catch (IOException ex)
        {
            logger.log(Level.SEVERE, "No se puede abrir la carpeta: {0}", ex.getMessage());
        }
    }

    /**
     * Devuelve la lista de videos seleccionados
     * @return Lista de videos seleccionados
     */
    public List<Video> getSelectedVideos()
    {
        VideoTableModel model = ((VideoTableModel)videoTable.getModel());
        List<Video> videos = new ArrayList();
        for(int row : videoTable.getSelectedRows())
        {
            videos.add(model.getVideo(row));
        }
        return videos;
    }

    /**
     * Elimina la lista de videos seleccionados
     */
    public void deleteSelectedVideos()
    {
        VideoTableModel model = (VideoTableModel)videoTable.getModel();

        int[] rows = videoTable.getSelectedRows();
        Arrays.sort(rows);

        for(int i = rows.length - 1; i >= 0; i--)
        {
            int row = rows[i];

            if (model.isNew(row))
                model.removeRow(row);
            else if (model.isDeleted(row))
                model.setDeleted(row, false);
            else
                model.setDeleted(row, true);
        }
        model.fireTableDataChanged();
    }

    /**
     * Devuelve el modelo asociado a la lista de videos
     * @return Modelo de videos
     */
    public VideoTableModel getModel()
    {
        return (VideoTableModel)videoTable.getModel();
    }

    /**
     * Genera un evento al seleccionar un video.
     * @param evt
     */
    private void videoTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_videoTableMouseReleased
        if (videoTable.isEnabled())
        {
            throwMouseEvent();
        }
}//GEN-LAST:event_videoTableMouseReleased
    private void videoTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_videoTableMouseClicked
        if (this.isEnabled() && evt.getClickCount() == 2)
        {
            openSelectedVideo();
        }
        if (evt.isMetaDown())
        {
            // Seleccion la fila bajo el cursor
            int rowNumber = videoTable.rowAtPoint(evt.getPoint());
            ListSelectionModel model = videoTable.getSelectionModel();
            model.setSelectionInterval(rowNumber, rowNumber);

            // Compruebo si el video es nuevo para deshabilitar la opcion
            // de mostrar las imagenes (al ser nuevo no existen)
            VideoTableModel vtm = (VideoTableModel)videoTable.getModel();
            if (vtm.isNew(rowNumber))
            {
                menuOpenImages.setEnabled(false);
            }
            else
            {
                menuOpenImages.setEnabled(true);
            }

            // Muestro el menu
            videoTableMenu.show(videoTable, evt.getX(), evt.getY());
        }
}//GEN-LAST:event_videoTableMouseClicked

    /**
     * Abre el video seleccionado
     * @param evt 
     */
    private void menuOpenVideoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuOpenVideoActionPerformed
    {//GEN-HEADEREND:event_menuOpenVideoActionPerformed
        openSelectedVideo();
    }//GEN-LAST:event_menuOpenVideoActionPerformed

    /**
     * Abre la carpeta donde se encuentra el video seleccionado
     * @param evt 
     */
    private void menuOpenFolderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuOpenFolderActionPerformed
    {//GEN-HEADEREND:event_menuOpenFolderActionPerformed
        VideoTableModel model = (VideoTableModel)videoTable.getModel();
        Video video = model.getVideo(videoTable.getSelectedRow());
        openFolder(video.getFile().getParentFile());
    }//GEN-LAST:event_menuOpenFolderActionPerformed

    /**
     * Abre la carpeta donde se encuentran las imagenes del video seleccionado
     * @param evt 
     */
    private void menuOpenImagesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuOpenImagesActionPerformed
    {//GEN-HEADEREND:event_menuOpenImagesActionPerformed
        VideoTableModel model = (VideoTableModel)videoTable.getModel();
        Video video = model.getVideo(videoTable.getSelectedRow());
        openFolder(video.getFramesDir());
    }//GEN-LAST:event_menuOpenImagesActionPerformed

    /**
     * Genera un evento de click.
     */
    private void throwMouseEvent()
    {
        Container container = this.getParent();
        while (!(container instanceof PropertyChangeListener))
        {
            container = container.getParent();
        }
        PropertyChangeListener listener = (PropertyChangeListener)container;
        PropertyChangeEvent event = new PropertyChangeEvent(this, VideoPanel.EVENT_CLICK, 0, 1);
        listener.propertyChange(event);
    }

    /**
     * Cambia el idioma del panel.
     */
    @Override
    public void onLocaleChange()
    {
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("configuration/language");

        menuOpenVideo.setText(bundle.getString("menu.videotable.openvideo"));
        menuOpenFolder.setText(bundle.getString("menu.videotable.openfolder"));
        menuOpenImages.setText(bundle.getString("menu.videotable.openimages"));
    }

    /**
     * Cambia el idioma del panel.
     * @param ae 
     */
    @Override
    public void actionPerformed(ActionEvent ae)
    {
        onLocaleChange();
    }

    /**
     * <p>Clase que controla como se muestra una celda de la tabla de videos.</p>
     * <ul>
     *      <li>Video existente : Se muestra en negro.</li>
     *      <li>Video nuevo     : Se muestra en verde.</li>
     *      <li>Video borrado   : Se muestra en rojo.</li>
     * </ul>
     */
    private class VideoCellRenderer extends DefaultTableCellRenderer
    {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
        {
            super.getTableCellRendererComponent (table, value, isSelected, hasFocus, row, column);

            VideoTableModel model = (VideoTableModel)table.getModel();

            if (model.isNew(row))
            {
                setForeground(new Color(00, 94, 00));
            }
            else if (model.isDeleted(row))
            {
                setForeground(Color.red);
            }
            else
            {
                setForeground(Color.black);
            }
            return this;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem menuOpenFolder;
    private javax.swing.JMenuItem menuOpenImages;
    private javax.swing.JMenuItem menuOpenVideo;
    private javax.swing.JScrollPane videoScroll;
    private javax.swing.JTable videoTable;
    private javax.swing.JPopupMenu videoTableMenu;
    // End of variables declaration//GEN-END:variables

}
