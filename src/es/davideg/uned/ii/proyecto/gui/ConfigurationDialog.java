/** Copyright 2010 David Escribano García
*
* Author: David Escribano García
* Director: Jesús Antonio Vega Sánchez (CIEMAT)
* Supervisor: Sebastián Dormido Canto (UNED)
*
* Licensed under the EUPL, Version 1.1 or - as soon they will be
* approved by the European Commission - subsequent versions of the
* EUPL (the "Licence"); you may not use this work except in
* compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://www.osor.eu/eupl/european-union-public-licence-eupl-v.1.1
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the Licence is distributed on an "AS
* IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied.
* See the Licence for the specific language governing permissions
* and limitations under the Licence.
*/

package es.davideg.uned.ii.proyecto.gui;

import es.davideg.uned.ii.proyecto.ConfigurationManager;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;

/**
 * Cuadro de dialogo que muestra y permite modificar las opciones de
 * configuración de la aplicación.
 * @author David Escribano García
 */
public class ConfigurationDialog extends javax.swing.JDialog
{

    private static final Logger logger = Logger.getLogger(NewDbDialog.class.getName());

    /** Crea un nuevo formulario ConfigurationDialog */
    public ConfigurationDialog(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
        installEscapeCloseOperation();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelVideos = new javax.swing.JPanel();
        lblVideoPath = new javax.swing.JLabel();
        txtVideoPath = new javax.swing.JTextField();
        buttonVideoPath = new javax.swing.JButton();
        lblVideoExtensions = new javax.swing.JLabel();
        txtVideoExtensions = new javax.swing.JTextField();
        panelImages = new javax.swing.JPanel();
        lblImagePath = new javax.swing.JLabel();
        txtImagePath = new javax.swing.JTextField();
        buttonImagePath = new javax.swing.JButton();
        lblImageExtensions = new javax.swing.JLabel();
        txtImageExtensions = new javax.swing.JTextField();
        lblImageConsecutive = new javax.swing.JLabel();
        spnImageConsecutive = new javax.swing.JSpinner();
        lblImagesMax = new javax.swing.JLabel();
        spnImageMax = new javax.swing.JSpinner();
        lblImageMaxDiff = new javax.swing.JLabel();
        spnImageMaxDiff = new javax.swing.JSpinner();
        buttonOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("configuration/language"); // NOI18N
        setTitle(bundle.getString("configuration.title")); // NOI18N
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);

        panelVideos.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("configuration.video"))); // NOI18N

        lblVideoPath.setText(bundle.getString("configuration.video.path")); // NOI18N

        txtVideoPath.setText(ConfigurationManager.getProperty("video.path"));

        buttonVideoPath.setText(bundle.getString("configuration.browse")); // NOI18N
        buttonVideoPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVideoPathActionPerformed(evt);
            }
        });

        lblVideoExtensions.setText(bundle.getString("configuration.video.types")); // NOI18N

        txtVideoExtensions.setText(ConfigurationManager.getProperty("video.extension"));

        javax.swing.GroupLayout panelVideosLayout = new javax.swing.GroupLayout(panelVideos);
        panelVideos.setLayout(panelVideosLayout);
        panelVideosLayout.setHorizontalGroup(
            panelVideosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVideosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelVideosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVideosLayout.createSequentialGroup()
                        .addComponent(lblVideoPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtVideoPath, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE))
                    .addGroup(panelVideosLayout.createSequentialGroup()
                        .addComponent(lblVideoExtensions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtVideoExtensions, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonVideoPath)
                .addContainerGap())
        );
        panelVideosLayout.setVerticalGroup(
            panelVideosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVideosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelVideosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVideoPath)
                    .addComponent(txtVideoPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonVideoPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelVideosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtVideoExtensions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVideoExtensions))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelImages.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("configuration.images"))); // NOI18N

        lblImagePath.setText(bundle.getString("configuration.images.path")); // NOI18N

        txtImagePath.setText(ConfigurationManager.getProperty("image.path"));

        buttonImagePath.setText(bundle.getString("configuration.browse")); // NOI18N
        buttonImagePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImagePathActionPerformed(evt);
            }
        });

        lblImageExtensions.setText(bundle.getString("configuration.images.types")); // NOI18N

        txtImageExtensions.setText(ConfigurationManager.getProperty("image.extension"));

        lblImageConsecutive.setText(bundle.getString("configuration.images.noprocess")); // NOI18N

        spnImageConsecutive.setModel(new javax.swing.SpinnerNumberModel(25, 0, 100000, 1));
        try
        {
            final int consecutiveValue = Integer.parseInt(ConfigurationManager.getProperty("image.consecutive"));
            spnImageConsecutive.setValue(consecutiveValue);
        }
        catch(Exception ex)
        {
        }

        lblImagesMax.setText(bundle.getString("configuration.images.maximages")); // NOI18N

        try
        {
            final int imageMaxResults = Integer.parseInt(ConfigurationManager.getProperty("image.maxresults"));
            spnImageMax.setValue(imageMaxResults);
        }
        catch(Exception ex)
        {
        }
        spnImageMax.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1000), Integer.valueOf(1), null, Integer.valueOf(1)));

        lblImageMaxDiff.setText(bundle.getString("configuration.images.maxdiff")); // NOI18N

        spnImageMaxDiff.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(5000000L), Long.valueOf(0L), null, Long.valueOf(10000L)));
        try
        {
            final long imageMaxDiff = Long.parseLong(ConfigurationManager.getProperty("image.maxdiff"));
            spnImageMaxDiff.setValue(imageMaxDiff);
        }
        catch(Exception ex)
        {
        }

        javax.swing.GroupLayout panelImagesLayout = new javax.swing.GroupLayout(panelImages);
        panelImages.setLayout(panelImagesLayout);
        panelImagesLayout.setHorizontalGroup(
            panelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImagesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelImagesLayout.createSequentialGroup()
                        .addGroup(panelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelImagesLayout.createSequentialGroup()
                                .addComponent(lblImagePath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtImagePath, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE))
                            .addGroup(panelImagesLayout.createSequentialGroup()
                                .addComponent(lblImageExtensions)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtImageExtensions, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonImagePath))
                    .addGroup(panelImagesLayout.createSequentialGroup()
                        .addGroup(panelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblImageConsecutive)
                            .addComponent(lblImagesMax)
                            .addComponent(lblImageMaxDiff))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spnImageMax, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                            .addComponent(spnImageConsecutive, javax.swing.GroupLayout.PREFERRED_SIZE, 68, Short.MAX_VALUE)
                            .addComponent(spnImageMaxDiff, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        panelImagesLayout.setVerticalGroup(
            panelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImagesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblImagePath)
                    .addComponent(txtImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonImagePath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblImageExtensions)
                    .addComponent(txtImageExtensions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblImageConsecutive)
                    .addComponent(spnImageConsecutive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblImageMaxDiff)
                    .addComponent(spnImageMaxDiff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblImagesMax)
                    .addComponent(spnImageMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonOk.setText(bundle.getString("configuration.ok")); // NOI18N
        buttonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOkActionPerformed(evt);
            }
        });
        this.getRootPane().setDefaultButton(buttonOk);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelImages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelVideos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonOk, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelVideos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelImages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonOk)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Muestra un cuadro de dialogo para seleccionar la ruta predeterminada
     * de los vídeos.
     * @param evt 
     */
    private void buttonVideoPathActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonVideoPathActionPerformed
    {//GEN-HEADEREND:event_buttonVideoPathActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            txtVideoPath.setText(fc.getSelectedFile().getAbsolutePath());
        }
}//GEN-LAST:event_buttonVideoPathActionPerformed

    /**
     * Muestra un cuadro de dialogo para seleccionar la ruta predeterminada
     * de las imágenes.
     * @param evt 
     */
    private void buttonImagePathActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonImagePathActionPerformed
    {//GEN-HEADEREND:event_buttonImagePathActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            txtImagePath.setText(fc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_buttonImagePathActionPerformed

    /**
     * Acepta y actualiza la configuración.
     * @param evt 
     */
    private void buttonOkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonOkActionPerformed
    {//GEN-HEADEREND:event_buttonOkActionPerformed
        txtImageExtensions.setText(txtImageExtensions.getText().toLowerCase());
        txtVideoExtensions.setText(txtVideoExtensions.getText().toLowerCase());
        
        StringBuffer sb = new StringBuffer();
        boolean resultado = validateInput(sb);
        if (resultado)
        {
            try
            {
                ConfigurationManager.setProperty("video.path", txtVideoPath.getText());
                ConfigurationManager.setProperty("video.extension", txtVideoExtensions.getText());
                ConfigurationManager.setProperty("image.path", txtImagePath.getText());
                ConfigurationManager.setProperty("image.extension", txtImageExtensions.getText());
                ConfigurationManager.setProperty("image.consecutive", String.valueOf(spnImageConsecutive.getValue()));
                ConfigurationManager.setProperty("image.maxresults", String.valueOf(spnImageMax.getValue()));
                ConfigurationManager.setProperty("image.maxdiff", String.valueOf(spnImageMaxDiff.getValue()));

                ConfigurationManager.save();
            }
            catch (IOException ex)
            {
                logger.log(Level.SEVERE, "No se puede guardar la configuracion: {0}", ex.getMessage());
            }
            this.dispose();   
        }
        else
        {
            final ResourceBundle bundle = ResourceBundle.getBundle("configuration/language");
            JOptionPane.showMessageDialog(this, sb, bundle.getString("error.configuration"), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonOkActionPerformed

    /**
     * Comprueba que la configuración introducida por el usuario es valida.
     * @param sb Información sobre el error en caso de producirse
     * @return Verdadero si no hay errores
     */
    private boolean validateInput(StringBuffer sb)
    {
        boolean valid = true;
        final ResourceBundle bundle = ResourceBundle.getBundle("configuration/language");

        // Compruebo las rutas
        final File v_folder = new File(txtVideoPath.getText());
        if (!"".equals(txtVideoPath.getText()) && (!v_folder.exists() || !v_folder.isDirectory()))
        {
            final String message = MessageFormat.format(bundle.getString("error.configuration.vfolder_not_exists_0"), v_folder.getName());
            sb.append(message).append("\n");
            txtVideoPath.setBackground(Color.red);
            valid = false;
        }
        else
        {
            txtVideoPath.setBackground(Color.white);
        }

        final File i_folder = new File(txtImagePath.getText());
        if (!"".equals(txtImagePath.getText()) && (!i_folder.exists() || !i_folder.isDirectory()))
        {
            final String message = MessageFormat.format(bundle.getString("error.configuration.ifolder_not_exists_0"), i_folder.getName());
            sb.append(message).append("\n");
            txtImagePath.setBackground(Color.red);
            valid = false;
        }
        else
        {
            txtImagePath.setBackground(Color.white);
        }

        // Compruebo las extensiones
        if (!txtVideoExtensions.getText().matches("(\\d|\\w|,)+"))
        {
            final String message = bundle.getString("error.configuration.extensions_0");
            sb.append(message).append("\n");
            txtVideoExtensions.setBackground(Color.red);
            valid = false;
        }
        else
        {
            txtVideoExtensions.setBackground(Color.white);
        }
        
        if (!txtImageExtensions.getText().matches("(\\d|\\w|,)+"))
        {
            final String message = bundle.getString("error.configuration.extensions_1");
            sb.append(message).append("\n");
            txtImageExtensions.setBackground(Color.red);
            valid = false;
        }
        else
        {
            txtImageExtensions.setBackground(Color.white);
        }

        return valid;
    }
    
    /**
     * Establece que al pulsar escape se cierre la ventana
     */
    private void installEscapeCloseOperation()
    {
        final JDialog dialog = this;
        final KeyStroke escapeStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        final String dispatchWindowClosingActionMapKey = "es.davideg.uned.ii.proyecto.gui.ConfigurationDialog:WINDOW_CLOSING";

        Action dispatchClosing =
            new AbstractAction()
            { 
                @Override
                public void actionPerformed(ActionEvent event)
                {
                    dialog.dispatchEvent(new WindowEvent(dialog, WindowEvent.WINDOW_CLOSING));
                }
            };
        JRootPane root = dialog.getRootPane();
        root.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escapeStroke, dispatchWindowClosingActionMapKey);
        root.getInputMap(JComponent.WHEN_FOCUSED).put(escapeStroke, dispatchWindowClosingActionMapKey);
        root.getActionMap().put(dispatchWindowClosingActionMapKey, dispatchClosing); 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonImagePath;
    private javax.swing.JButton buttonOk;
    private javax.swing.JButton buttonVideoPath;
    private javax.swing.JLabel lblImageConsecutive;
    private javax.swing.JLabel lblImageExtensions;
    private javax.swing.JLabel lblImageMaxDiff;
    private javax.swing.JLabel lblImagePath;
    private javax.swing.JLabel lblImagesMax;
    private javax.swing.JLabel lblVideoExtensions;
    private javax.swing.JLabel lblVideoPath;
    private javax.swing.JPanel panelImages;
    private javax.swing.JPanel panelVideos;
    private javax.swing.JSpinner spnImageConsecutive;
    private javax.swing.JSpinner spnImageMax;
    private javax.swing.JSpinner spnImageMaxDiff;
    private javax.swing.JTextField txtImageExtensions;
    private javax.swing.JTextField txtImagePath;
    private javax.swing.JTextField txtVideoExtensions;
    private javax.swing.JTextField txtVideoPath;
    // End of variables declaration//GEN-END:variables

}
