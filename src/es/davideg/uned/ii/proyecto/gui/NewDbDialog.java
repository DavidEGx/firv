/** Copyright 2010 David Escribano García
*
* Author: David Escribano García
* Director: Jesús Antonio Vega Sánchez (CIEMAT)
* Supervisor: Sebastián Dormido Canto (UNED)
*
* Licensed under the EUPL, Version 1.1 or - as soon they will be
* approved by the European Commission - subsequent versions of the
* EUPL (the "Licence"); you may not use this work except in
* compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://www.osor.eu/eupl/european-union-public-licence-eupl-v.1.1
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the Licence is distributed on an "AS
* IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied.
* See the Licence for the specific language governing permissions
* and limitations under the Licence.
*/

package es.davideg.uned.ii.proyecto.gui;

import es.davideg.uned.ii.proyecto.db.DbManager;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.io.File;
import java.text.MessageFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.JSpinner;
import javax.swing.KeyStroke;

/**
 * Formulario que presenta las opciones para crear una nueva base de datos.
 * @author David Escribano García
 */
public class NewDbDialog extends javax.swing.JDialog
{
    private File dbFile;
    private final DbManager dbManager = new DbManager();
    private static final Logger logger = Logger.getLogger(NewDbDialog.class.getName());

    /** Crea un nuevo formulario NewDbDialog */
    public NewDbDialog(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
        installEscapeCloseOperation();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelDb = new javax.swing.JPanel();
        lblDbPath = new javax.swing.JLabel();
        lblDbTipo = new javax.swing.JLabel();
        comboDbTipo = new javax.swing.JComboBox();
        txtDbPath = new javax.swing.JTextField();
        buttonDbPath = new javax.swing.JButton();
        panelImage = new javax.swing.JPanel();
        lblImagePath = new javax.swing.JLabel();
        buttonImagePath = new javax.swing.JButton();
        txtImagePath = new javax.swing.JTextField();
        lblImageSize = new javax.swing.JLabel();
        spinImageX = new javax.swing.JSpinner();
        lblImageSizeX = new javax.swing.JLabel();
        spinImageY = new javax.swing.JSpinner();
        lblWaveletSize = new javax.swing.JLabel();
        spinWaveletX = new javax.swing.JSpinner();
        lblWaveletX = new javax.swing.JLabel();
        spinWaveletY = new javax.swing.JSpinner();
        panelVideo = new javax.swing.JPanel();
        lblVideoProcesador = new javax.swing.JLabel();
        comboVideoProcesador = new javax.swing.JComboBox();
        buttonNew = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("configuration/language"); // NOI18N
        setTitle(bundle.getString("newdb.title")); // NOI18N
        setModal(true);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setName("Nueva base de datos"); // NOI18N
        setResizable(false);

        panelDb.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("newdb.db")))); // NOI18N

        lblDbPath.setText(bundle.getString("newdb.db.path")); // NOI18N

        lblDbTipo.setText(bundle.getString("newdb.db.type")); // NOI18N

        comboDbTipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SQLite" }));
        comboDbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDbTipoActionPerformed(evt);
            }
        });

        buttonDbPath.setText(bundle.getString("newdb.browse")); // NOI18N
        buttonDbPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDbPathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelDbLayout = new javax.swing.GroupLayout(panelDb);
        panelDb.setLayout(panelDbLayout);
        panelDbLayout.setHorizontalGroup(
            panelDbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDbLayout.createSequentialGroup()
                .addGroup(panelDbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelDbLayout.createSequentialGroup()
                        .addComponent(lblDbTipo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboDbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelDbLayout.createSequentialGroup()
                        .addComponent(lblDbPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDbPath, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonDbPath)))
                .addContainerGap())
        );
        panelDbLayout.setVerticalGroup(
            panelDbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDbLayout.createSequentialGroup()
                .addGroup(panelDbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDbTipo)
                    .addComponent(comboDbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDbPath)
                    .addComponent(txtDbPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonDbPath)))
        );

        panelImage.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("newdb.image"))); // NOI18N

        lblImagePath.setText(bundle.getString("newdb.image.path")); // NOI18N

        buttonImagePath.setText(bundle.getString("newdb.browse")); // NOI18N
        buttonImagePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonImagePathActionPerformed(evt);
            }
        });

        lblImageSize.setText(bundle.getString("newdb.image.size")); // NOI18N

        spinImageX.setModel(new javax.swing.SpinnerNumberModel(512, 16, 4096, 1));

        lblImageSizeX.setText("x");

        spinImageY.setModel(new javax.swing.SpinnerNumberModel(512, 16, 4096, 1));

        lblWaveletSize.setText(bundle.getString("newdb.image.wavelet_size")); // NOI18N

        spinWaveletX.setModel(new javax.swing.SpinnerNumberModel(8, 2, 512, 1));

        lblWaveletX.setText("x");

        spinWaveletY.setModel(new javax.swing.SpinnerNumberModel(8, 2, 512, 1));

        javax.swing.GroupLayout panelImageLayout = new javax.swing.GroupLayout(panelImage);
        panelImage.setLayout(panelImageLayout);
        panelImageLayout.setHorizontalGroup(
            panelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImageLayout.createSequentialGroup()
                .addGroup(panelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelImageLayout.createSequentialGroup()
                        .addComponent(lblImagePath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtImagePath, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelImageLayout.createSequentialGroup()
                        .addGroup(panelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblImageSize)
                            .addComponent(lblWaveletSize))
                        .addGap(4, 4, 4)
                        .addGroup(panelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spinWaveletX)
                            .addComponent(spinImageX, javax.swing.GroupLayout.PREFERRED_SIZE, 49, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblWaveletX)
                            .addComponent(lblImageSizeX))
                        .addGap(12, 12, 12)
                        .addGroup(panelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spinWaveletY)
                            .addComponent(spinImageY, javax.swing.GroupLayout.PREFERRED_SIZE, 50, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 356, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelImageLayout.setVerticalGroup(
            panelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImageLayout.createSequentialGroup()
                .addGroup(panelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblImagePath)
                    .addComponent(buttonImagePath)
                    .addComponent(txtImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblImageSize)
                    .addComponent(spinImageX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblImageSizeX)
                    .addComponent(spinImageY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblWaveletSize)
                    .addComponent(spinWaveletX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWaveletX)
                    .addComponent(spinWaveletY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelVideo.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("newdb.video"))); // NOI18N

        lblVideoProcesador.setText(bundle.getString("newdb.video.processor")); // NOI18N

        comboVideoProcesador.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ffmpeg" }));

        javax.swing.GroupLayout panelVideoLayout = new javax.swing.GroupLayout(panelVideo);
        panelVideo.setLayout(panelVideoLayout);
        panelVideoLayout.setHorizontalGroup(
            panelVideoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVideoLayout.createSequentialGroup()
                .addComponent(lblVideoProcesador)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboVideoProcesador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(432, Short.MAX_VALUE))
        );
        panelVideoLayout.setVerticalGroup(
            panelVideoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVideoLayout.createSequentialGroup()
                .addGroup(panelVideoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVideoProcesador)
                    .addComponent(comboVideoProcesador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonNew.setText(bundle.getString("newdb.create")); // NOI18N
        buttonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewActionPerformed(evt);
            }
        });
        this.getRootPane().setDefaultButton(buttonNew);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelVideo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelDb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelImage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonNew, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelDb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelVideo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonNew)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboDbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDbTipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboDbTipoActionPerformed

    /**
     * Muestra una ventana para seleccionar el nuevo fichero de base de datos
     * que se va a crear.
     * @param evt 
     */
    private void buttonDbPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDbPathActionPerformed
        final JFileChooser fc = new JFileChooser();
        final int returnVal = fc.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            String path = fc.getSelectedFile().getAbsolutePath();
            if (!path.endsWith(".sqlite"))
                path += ".sqlite";
            txtDbPath.setText(path);
        }
        validateInput(new StringBuffer());
    }//GEN-LAST:event_buttonDbPathActionPerformed

    /**
     * Muestra una ventana para seleccionar la ubicacion donde se van a guardar
     * las imágenes.
     * @param evt 
     */
    private void buttonImagePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonImagePathActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            txtImagePath.setText(fc.getSelectedFile().getAbsolutePath());
        }
        validateInput(new StringBuffer());
    }//GEN-LAST:event_buttonImagePathActionPerformed

    /**
     * Crea una nueva base de datos sqlite.
     * Se realizan las validaciones oportunas y si no hay ningún error
     * se crea la base de datos.
     * @param evt 
     */
    private void buttonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewActionPerformed
        StringBuffer sb = new StringBuffer("");
        boolean resultado = validateInput(sb);
        if (resultado)
        {
            try
            {
                dbFile = new File(txtDbPath.getText());
                dbManager.setConnectionString(dbFile);
                dbManager.createDb();
                dbManager.setProperty(DbManager.DbProperty.VIDEO_PROCESSOR, (String) comboVideoProcesador.getSelectedItem());
                dbManager.setProperty(DbManager.DbProperty.FRAMES_PATH, (String) txtImagePath.getText());
                int imagex = (Integer)spinImageX.getValue();
                int imagey = (Integer)spinImageY.getValue();
                dbManager.setProperty(DbManager.DbProperty.IMAGE_SIZE_X, String.valueOf(imagex));
                dbManager.setProperty(DbManager.DbProperty.IMAGE_SIZE_Y, String.valueOf(imagey));
                int waveletx = (Integer)spinWaveletX.getValue();
                int wavelety = (Integer)spinWaveletY.getValue();
                dbManager.setProperty(DbManager.DbProperty.HAAR_SIZE_X, String.valueOf(waveletx));
                dbManager.setProperty(DbManager.DbProperty.HAAR_SIZE_Y, String.valueOf(wavelety));
                dbManager.disconnect();

                this.setVisible(false);
            }
            catch (Exception ex)
            {
                dbFile = null;
                logger.log(Level.SEVERE, "No se puede crear la base de datos: {0}", ex.getMessage());
            }
        }
        else
        {
            // Muestro los errores
            dbFile = null;
            java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("configuration/language");
            JOptionPane.showMessageDialog(this, sb, bundle.getString("error.newdb"), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonNewActionPerformed

    /**
     * Devuelve la conexion con la base de datos creada.
     * @return Fichero creado con la base de datos
     */
    public File getConnection()
    {
        return dbFile;
    }

    /**
     * Valida que los datos introducidos por el usuario son correctos
     * para crear la base de datos.
     * @param sb Mensaje indicando los errores existentes
     * @return Verdadero si los datos son correctos, falso en caso de error
     */
    private boolean validateInput(StringBuffer sb)
    {
        boolean valid = true;
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("configuration/language");

        // Compruebo el fichero para la nueva base de datos
        File f = new File(txtDbPath.getText());
        if ("".equals(txtDbPath.getText()))
        {
            sb.append(bundle.getString("error.newdb.db.path_0"));
            sb.append("\n");
            valid = false;
            txtDbPath.setBackground(Color.red);
        }
        else if (f.exists())
        {
            
            sb.append(MessageFormat.format(bundle.getString("error.newdb.db.path_1"), f.getName()));
            sb.append("\n");
            valid = false;
            txtDbPath.setBackground(Color.red);
        }
        else if (!f.getParentFile().exists())
        {
            sb.append(MessageFormat.format(bundle.getString("error.newdb.db.path_2"), f.getParentFile().getName()));
            sb.append("\n");
            valid = false;
            txtDbPath.setBackground(Color.red);
        }
        else
        {
            txtDbPath.setBackground(Color.WHITE);
        }

        // Compruebo la ruta donde se van a guardar las imagenes
        f = new File(txtImagePath.getText());
        if ("".equals(txtImagePath.getText()))
        {
            
            sb.append(bundle.getString("error.newdb.image.path_0"));
            sb.append("\n");
            valid = false;
            txtImagePath.setBackground(Color.red);
        }
        else if (!f.exists())
        {
            sb.append(MessageFormat.format(bundle.getString("error.newdb.image.path_1"), f.getName()));
            sb.append("\n");
            valid = false;
            txtImagePath.setBackground(Color.red);
        }
        else if (!f.isDirectory())
        {
            sb.append(MessageFormat.format(bundle.getString("error.newdb.image.path_2"), f.getName()));
            sb.append("\n");
            valid = false;
            txtImagePath.setBackground(Color.red);
        }
        else
        {
            txtImagePath.setBackground(Color.WHITE);
        }
        
        // Compruebo el tamaño de la wavelet
        if ((Integer)spinImageX.getValue() % (Integer)spinWaveletX.getValue() != 0)
        {
            sb.append(bundle.getString("error.newdb.image.wavelet_size_0"));
            sb.append("\n");
            
            valid = false;
            ((JSpinner.NumberEditor)spinWaveletX.getEditor()).getTextField().setBackground(Color.red);
        }
        else
        {
            ((JSpinner.NumberEditor)spinWaveletX.getEditor()).getTextField().setBackground(Color.white);
        }

        if ((Integer)spinImageY.getValue() % (Integer)spinWaveletY.getValue() != 0)
        {
            sb.append(bundle.getString("error.newdb.image.wavelet_size_1"));
            valid = false;
            ((JSpinner.NumberEditor)spinWaveletY.getEditor()).getTextField().setBackground(Color.red);
        }
        else
        {
            ((JSpinner.NumberEditor)spinWaveletY.getEditor()).getTextField().setBackground(Color.white);
        }

        return valid;
    }
    
    /**
     * Establece que al pulsar escape se cierre la ventana
     */
    private void installEscapeCloseOperation()
    {
        final JDialog dialog = this;
        final KeyStroke escapeStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        final String dispatchWindowClosingActionMapKey = "es.davideg.uned.ii.proyecto.gui.NewDbDialog:WINDOW_CLOSING";

        Action dispatchClosing =
            new AbstractAction()
            { 
                @Override
                public void actionPerformed(ActionEvent event)
                {
                    dialog.dispatchEvent(new WindowEvent(dialog, WindowEvent.WINDOW_CLOSING));
                }
            };
        JRootPane root = dialog.getRootPane();
        root.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(escapeStroke, dispatchWindowClosingActionMapKey);
        root.getInputMap(JComponent.WHEN_FOCUSED).put(escapeStroke, dispatchWindowClosingActionMapKey);
        root.getActionMap().put(dispatchWindowClosingActionMapKey, dispatchClosing); 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDbPath;
    private javax.swing.JButton buttonImagePath;
    private javax.swing.JButton buttonNew;
    private javax.swing.JComboBox comboDbTipo;
    private javax.swing.JComboBox comboVideoProcesador;
    private javax.swing.JLabel lblDbPath;
    private javax.swing.JLabel lblDbTipo;
    private javax.swing.JLabel lblImagePath;
    private javax.swing.JLabel lblImageSize;
    private javax.swing.JLabel lblImageSizeX;
    private javax.swing.JLabel lblVideoProcesador;
    private javax.swing.JLabel lblWaveletSize;
    private javax.swing.JLabel lblWaveletX;
    private javax.swing.JPanel panelDb;
    private javax.swing.JPanel panelImage;
    private javax.swing.JPanel panelVideo;
    private javax.swing.JSpinner spinImageX;
    private javax.swing.JSpinner spinImageY;
    private javax.swing.JSpinner spinWaveletX;
    private javax.swing.JSpinner spinWaveletY;
    private javax.swing.JTextField txtDbPath;
    private javax.swing.JTextField txtImagePath;
    // End of variables declaration//GEN-END:variables

}
