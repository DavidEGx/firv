/** Copyright 2010 David Escribano García
*
* Author: David Escribano García
* Director: Jesús Antonio Vega Sánchez (CIEMAT)
* Supervisor: Sebastián Dormido Canto (UNED)
*
* Licensed under the EUPL, Version 1.1 or - as soon they will be
* approved by the European Commission - subsequent versions of the
* EUPL (the "Licence"); you may not use this work except in
* compliance with the Licence.
* You may obtain a copy of the Licence at:
*
* http://www.osor.eu/eupl/european-union-public-licence-eupl-v.1.1
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the Licence is distributed on an "AS
* IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
* express or implied.
* See the Licence for the specific language governing permissions
* and limitations under the Licence.
*/
package es.davideg.uned.ii.proyecto.gui;

import es.davideg.uned.ii.proyecto.ConfigurationManager;
import es.davideg.uned.ii.proyecto.image.ImageComparation;
import es.davideg.uned.ii.proyecto.image.filter.ResizeFilter;
import es.davideg.uned.ii.proyecto.image.SearchedImage;
import es.davideg.uned.ii.proyecto.video.Video;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.RowFilter.Entry;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 * <p>Formulario que representa una busqueda de imágenes.</p>
 * <p>Se muestra un listado de imágenes con aquellas imágenes que tienen la misma
 * wavelet que la imagen buscada</p>
 * @author David Escribano García
 */
public class ImagePanel extends javax.swing.JPanel implements LocaleChangeListener
{
    private static final Logger logger = Logger.getLogger(ImagePanel.class.getName());
    private final int ROW_HEIGHT = 256;

    /** Crea un nuevo formumario ImagePanel */
    public ImagePanel()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imageTableMenu = new javax.swing.JPopupMenu();
        menuOpenImage = new javax.swing.JMenuItem();
        menuOpenFolder = new javax.swing.JMenuItem();
        menuOpenVideoFolder = new javax.swing.JMenuItem();
        menuExclude = new javax.swing.JMenuItem();
        imageScroll = new javax.swing.JScrollPane();
        imageTable = new javax.swing.JTable();
        marcoImagen = new javax.swing.JPanel();
        searchedImagePanel = new javax.swing.JTabbedPane();
        imagePreviewPanel = new javax.swing.JPanel();
        searchedImage = new javax.swing.JLabel();
        waveletPreviewPanel = new javax.swing.JPanel();
        searchedWavelet = new javax.swing.JLabel();
        marcoFiltro = new javax.swing.JPanel();
        videoScroll = new javax.swing.JScrollPane();
        videoFilter = new javax.swing.JTable();
        maxDiferenciaLabel = new javax.swing.JLabel();
        maxDiferencia = new javax.swing.JSpinner();
        lblFoundImagesTxt = new javax.swing.JLabel();
        lblFoundImagesValue = new javax.swing.JLabel();
        lblFoundImagesTotal = new javax.swing.JLabel();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("configuration/language"); // NOI18N
        menuOpenImage.setText(bundle.getString("menu.imagetable.openimage")); // NOI18N
        menuOpenImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenImageActionPerformed(evt);
            }
        });
        imageTableMenu.add(menuOpenImage);

        menuOpenFolder.setText(bundle.getString("menu.imagetable.openfolder")); // NOI18N
        menuOpenFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenFolderActionPerformed(evt);
            }
        });
        imageTableMenu.add(menuOpenFolder);

        menuOpenVideoFolder.setText(bundle.getString("menu.imagetable.openvideofolder")); // NOI18N
        menuOpenVideoFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenVideoFolderActionPerformed(evt);
            }
        });
        imageTableMenu.add(menuOpenVideoFolder);

        menuExclude.setText(bundle.getString("menu.imagetable.excludevideo")); // NOI18N
        menuExclude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExcludeActionPerformed(evt);
            }
        });
        imageTableMenu.add(menuExclude);

        imageTable.setVisible(false);
        imageTable.setModel(new ImageTableModel());
        imageTable.setRowSorter(new TableRowSorter<ImageTableModel>((ImageTableModel)imageTable.getModel()));
        imageTable.setAutoCreateColumnsFromModel(false);
        imageTable.setRowHeight(ROW_HEIGHT);
        imageTable.removeColumn(imageTable.getColumn("row"));
        imageTable.getColumnModel().getColumn(2).setPreferredWidth(75);
        imageTable.getColumnModel().getColumn(2).setMinWidth(75);
        imageTable.getColumnModel().getColumn(2).setMaxWidth(75);
        imageTable.getColumnModel().getColumn(3).setPreferredWidth(75);
        imageTable.getColumnModel().getColumn(3).setMinWidth(75);
        imageTable.getColumnModel().getColumn(3).setMaxWidth(75);
        imageTable.getColumnModel().getColumn(4).setPreferredWidth(256);
        imageTable.getColumnModel().getColumn(4).setMinWidth(256);
        imageTable.getColumnModel().getColumn(4).setMaxWidth(256);
        //imageTable.getColumnModel().getColumn(4).setPreferredWidth(1000);
        imageTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageTableMouseClicked(evt);
            }
        });
        imageScroll.setViewportView(imageTable);

        marcoImagen.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("imagepanel.searchedimage"))); // NOI18N

        searchedImage.setText("ImagenBuscadaImagen");
        searchedImage.setText("");

        javax.swing.GroupLayout imagePreviewPanelLayout = new javax.swing.GroupLayout(imagePreviewPanel);
        imagePreviewPanel.setLayout(imagePreviewPanelLayout);
        imagePreviewPanelLayout.setHorizontalGroup(
            imagePreviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchedImage, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );
        imagePreviewPanelLayout.setVerticalGroup(
            imagePreviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchedImage, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
        );

        searchedImagePanel.addTab("Imagen", imagePreviewPanel);

        searchedWavelet.setText("WaveletBuscada");
        searchedWavelet.setText("");

        javax.swing.GroupLayout waveletPreviewPanelLayout = new javax.swing.GroupLayout(waveletPreviewPanel);
        waveletPreviewPanel.setLayout(waveletPreviewPanelLayout);
        waveletPreviewPanelLayout.setHorizontalGroup(
            waveletPreviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchedWavelet, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );
        waveletPreviewPanelLayout.setVerticalGroup(
            waveletPreviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchedWavelet, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
        );

        searchedImagePanel.addTab("Wavelet", waveletPreviewPanel);

        javax.swing.GroupLayout marcoImagenLayout = new javax.swing.GroupLayout(marcoImagen);
        marcoImagen.setLayout(marcoImagenLayout);
        marcoImagenLayout.setHorizontalGroup(
            marcoImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchedImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
        );
        marcoImagenLayout.setVerticalGroup(
            marcoImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchedImagePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
        );

        marcoFiltro.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("imagepanel.filter"))); // NOI18N

        videoFilter.setModel(new VideoFilterModel());
        videoFilter.getColumnModel().getColumn(0).setPreferredWidth(75);
        videoFilter.getColumnModel().getColumn(0).setMinWidth(75);
        videoFilter.getColumnModel().getColumn(0).setMaxWidth(75);
        videoFilter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                videoFilterMouseClicked(evt);
            }
        });
        videoScroll.setViewportView(videoFilter);

        maxDiferenciaLabel.setText(bundle.getString("imagepanel.filter.greatestdifference")); // NOI18N

        maxDiferencia.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(5000000L), Long.valueOf(0L), null, Long.valueOf(10000L)));
        try
        {
            final long imageMaxDiff = Long.parseLong(ConfigurationManager.getProperty("image.maxdiff"));
            maxDiferencia.setValue(imageMaxDiff);
        }
        catch(Exception ex)
        {
        }
        maxDiferencia.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxDiferenciaStateChanged(evt);
            }
        });

        javax.swing.GroupLayout marcoFiltroLayout = new javax.swing.GroupLayout(marcoFiltro);
        marcoFiltro.setLayout(marcoFiltroLayout);
        marcoFiltroLayout.setHorizontalGroup(
            marcoFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, marcoFiltroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(marcoFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(videoScroll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, marcoFiltroLayout.createSequentialGroup()
                        .addComponent(maxDiferenciaLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(maxDiferencia, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)))
                .addContainerGap())
        );
        marcoFiltroLayout.setVerticalGroup(
            marcoFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(marcoFiltroLayout.createSequentialGroup()
                .addGroup(marcoFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxDiferenciaLabel)
                    .addComponent(maxDiferencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(videoScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addContainerGap())
        );

        lblFoundImagesTxt.setText(bundle.getString("imagepanel.found")); // NOI18N

        lblFoundImagesValue.setText("0");

        lblFoundImagesTotal.setText("(0)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(imageScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(marcoImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(marcoFiltro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFoundImagesTxt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFoundImagesValue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFoundImagesTotal)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(marcoImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(marcoFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFoundImagesTotal)
                            .addComponent(lblFoundImagesValue)
                            .addComponent(lblFoundImagesTxt)))
                    .addComponent(imageScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Operaciones realizadas al hacer click sobre la lista de vídeos:
     * <ul>
     *      <li>Doble click     -> Abre la imagen</li>
     *      <li>Botón derecho   -> Muestra el menú</li>
     * </ul>
     * @param evt 
     */
    private void imageTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageTableMouseClicked
        if (evt.getClickCount() == 2)
        {
            final ImageTableModel itm = (ImageTableModel)imageTable.getModel();
            final int column = imageTable.getSelectedColumn();
            final int row = imageTable.convertRowIndexToModel(imageTable.getSelectedRow());
            File file;

            if (column == 0)
            {
                file = itm.getVideo(row).getFile();
            }
            else
            {
                file = itm.getImage(row).getFile();
            }
            Desktop desktop = Desktop.getDesktop();
            try
            {
                desktop.open(file);
            }
            catch (IOException ex)
            {
                logger.log(Level.SEVERE, "No se puede abrir la imagen: {0}", ex.getMessage());
            }
        }
        else if (evt.isMetaDown())
        {
            // Seleccion la fila bajo el cursor
            int rowNumber = imageTable.rowAtPoint(evt.getPoint());
            ListSelectionModel model = imageTable.getSelectionModel();
            model.setSelectionInterval(rowNumber, rowNumber);

            // Muestro el menu
            imageTableMenu.show(imageTable, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_imageTableMouseClicked

    /**
     * Filra las imágenes cuando se hace algún cambio en el filtro de vídeos.
     * @param evt 
     */
    private void videoFilterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_videoFilterMouseClicked
        filter();
    }//GEN-LAST:event_videoFilterMouseClicked

    /**
     * Filtra las imágenes cuando se cambia el valor de la máxima diferencia.
     * @param evt 
     */
    private void maxDiferenciaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxDiferenciaStateChanged
        filter();
    }//GEN-LAST:event_maxDiferenciaStateChanged

    /**
     * Abre la imagen seleccinada.
     * @param evt 
     */
    private void menuOpenImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenImageActionPerformed
        try
        {
            final ImageTableModel model = (ImageTableModel)imageTable.getModel();
            final int sr = imageTable.convertRowIndexToModel(imageTable.getSelectedRow());
            final File image = model.getImage(sr).getFile();
            Desktop.getDesktop().open(image);
        }
        catch (IOException ex)
        {
            logger.log(Level.SEVERE, "No se puede abrir la imagen seleccionada: {0}", ex.getMessage());
        }
    }//GEN-LAST:event_menuOpenImageActionPerformed

    /**
     * Abre la carepta donde se encuentra la imagen selecionada.
     * @param evt 
     */
    private void menuOpenFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenFolderActionPerformed
        try
        {
            final ImageTableModel model = (ImageTableModel)imageTable.getModel();
            final int sr = imageTable.convertRowIndexToModel(imageTable.getSelectedRow());
            final File image = model.getImage(sr).getFile();
            final File folder = image.getParentFile();
            Desktop.getDesktop().open(folder);
        }
        catch (IOException ex)
        {
            logger.log(Level.SEVERE, "No se puede abrir la carpeta seleccionada: {0}", ex.getMessage());
        }
    }//GEN-LAST:event_menuOpenFolderActionPerformed

    /**
     * Abre la carpeta donde se encuentra el video seleccionado.
     * @param evt 
     */
    private void menuOpenVideoFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenVideoFolderActionPerformed
        try
        {
            final ImageTableModel model = (ImageTableModel)imageTable.getModel();
            final int sr = imageTable.convertRowIndexToModel(imageTable.getSelectedRow());
            final File video = model.getVideo(sr).getFile();
            final File folder = video.getParentFile();
            Desktop.getDesktop().open(folder);
        }
        catch (IOException ex)
        {
            logger.log(Level.SEVERE, "No se puede abrir la carpeta seleccionada: {0}", ex.getMessage());
        }
    }//GEN-LAST:event_menuOpenVideoFolderActionPerformed

    /**
     * Excluye las imágenes que pertezcan al video seleccionado.
     * @param evt 
     */
    private void menuExcludeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExcludeActionPerformed
        // Obtengo el video seleccionado
        final ImageTableModel model = (ImageTableModel)imageTable.getModel();
        final int sr = imageTable.convertRowIndexToModel(imageTable.getSelectedRow());
        final Video video = model.getVideo(sr);

        // Busco ese video en el listado y lo deshabilito
        VideoFilterModel filterModel = (VideoFilterModel)videoFilter.getModel();
        
        for(int row = 0; row < filterModel.getRowCount(); row++)
        {
            if (video.equals(filterModel.getVideo(row)))
            {
                filterModel.setVisible(row, false);
                break;
            }
        }
        
        // Filtro
        filter();
    }//GEN-LAST:event_menuExcludeActionPerformed

    /**
     * Establece la imagen que se esta buscando.
     * @param image Imagen
     * @throws IOException 
     */
    public void setSearchedImage(final SearchedImage image)
    {
        
        
        // Obtengo el tamaño que tendrá la imagen
        int maxWidth = searchedImagePanel.getWidth();
        int maxHeight = searchedImagePanel.getHeight();
        if (maxWidth == 0)
            maxWidth = searchedImagePanel.getPreferredSize().width;
        if (maxHeight == 0)
            maxHeight = searchedImagePanel.getPreferredSize().height;

        // Creo un filtro para redimensionar la imagen
        final ResizeFilter resize = new ResizeFilter();
        resize.setDimensions(maxWidth, maxHeight, true);

        // Redimensiono y pinto la imagen original
        final Image originalImage = image.getImage();
        final Image resizedImage = resize.filter(originalImage, null);
        searchedImage.setIcon(new ImageIcon(resizedImage));

        // Redimensiono y pinto la imagen wavelet
        final Image waveletImage = image.getWaveletImage();
        final Image resizedWavelet = resize.filter(waveletImage, null);
        searchedWavelet.setIcon(new ImageIcon(resizedWavelet));
    }

    /**
     * Establece los resultados encontrados en una comparación.
     * @param results Lista de imágenes con los resultados
     */
    public void setComparationResults(final Vector<ImageComparation> results)
    {
        if (results == null)
            return;
        
        final ImageTableModel itm = (ImageTableModel)imageTable.getModel();
        final VideoFilterModel vtm = (VideoFilterModel)videoFilter.getModel();
        final int ROW_WIDTH = imageTable.getColumn(imageTable.getColumnName(4)).getWidth();

        // Número máximo de resultados
        int maxresults;
        try { maxresults = Integer.parseInt(ConfigurationManager.getProperty("image.maxresults")); }
        catch(Exception ex) { maxresults = 1000; }

        // Añado la lista de imagenes
        Set<Video> videoSet = new HashSet<Video>();
        int i = 1;
        for(ImageComparation ic : results)
        {
            final Video currentVideo = ic.getVideo();
            
            // Añado imagen
            ImageTableModel.ImageTableRow itr = itm.new ImageTableRow();
            itr.setVideo(currentVideo);
            itr.setImage(ic.getImage());
            itr.setDifference(ic.getDifference());
            itm.addRow(itr, ROW_WIDTH, ROW_HEIGHT);
            
            // Añado video
            videoSet.add(currentVideo);

            if (i >= maxresults)
                break;

            i++;
        }       
        itm.fireTableDataChanged();
        lblFoundImagesTotal.setText("(" + String.valueOf(itm.getRowCount()) + ")");

        // Añado la lista de videos para filtrar
        List<Video> videoList = new ArrayList<Video>(videoSet);
        Collections.sort(
            videoList,
            new Comparator<Video>()
            {
                @Override
                public int compare(Video v1, Video v2)
                {
                    final String v1name = v1.getName();
                    final String v2name = v2.getName();
                    return v1name.compareTo(v2name);
                }
            }
        );

        for(Video video : videoList)
        {
            vtm.addRow(video);
        }
        vtm.fireTableDataChanged();

        // Filtro y muestro la tabla
        filter();
        imageTable.setVisible(true);
    }

    /**
     * Filtra las imágenes mostradas en la tabla de imágenes.
     */
    private void filter()
    {
        TableRowSorter sorter = (TableRowSorter)imageTable.getRowSorter();
        RowFilter<ImageTableModel, Object> filter = new RowFilter<ImageTableModel, Object>()
        {

            long maxDiff = ((Long)maxDiferencia.getValue()).longValue();

            @Override
            public boolean include(Entry<? extends ImageTableModel, ? extends Object> entry)
            {
                ImageTableModel.ImageTableRow itr = (ImageTableModel.ImageTableRow)entry.getValue(0);
                String hash = itr.getVideo().getHash();
                Long difference = itr.getDifference();
                if (difference > maxDiff)
                {
                    return false;
                }
                
                int count = videoFilter.getModel().getRowCount();
                for(int row = 0; row < count; row++) {
                    Boolean videoVisible = (Boolean)videoFilter.getModel().getValueAt(row,0);
                    Video video = (Video)videoFilter.getModel().getValueAt(row,1);
                    if (videoVisible && hash.equals(video.getHash()))
                    {
                        return true;
                    }
                }
                return false;
            }

        };
        sorter.setRowFilter(filter);
        lblFoundImagesValue.setText(String.valueOf(imageTable.getRowCount()));
    }

    /**
     * Cambia el idioma del panel
     */
    @Override
    public void onLocaleChange()
    {
        ResourceBundle bundle = ResourceBundle.getBundle("configuration/language");

        menuOpenImage.setText(bundle.getString("menu.imagetable.openimage"));
        menuOpenFolder.setText(bundle.getString("menu.imagetable.openfolder"));
        menuOpenVideoFolder.setText(bundle.getString("menu.imagetable.openvideofolder"));
        menuExclude.setText(bundle.getString("menu.imagetable.excludevideo"));
        searchedImage.setText("");
        searchedWavelet.setText("");
        maxDiferenciaLabel.setText(bundle.getString("imagepanel.filter.greatestdifference"));
        lblFoundImagesTxt.setText(bundle.getString("imagepanel.found"));

    }

    /**
     * Cambia el idioma del panel
     * @param ae 
     */
    @Override
    public void actionPerformed(ActionEvent ae)
    {
        onLocaleChange();
    }
    
    /**
     * Modelo de tabla con una lista de vídeos para filtrar.
     */
    private class VideoFilterModel extends DefaultTableModel
    {
        /**
         * Crea un nuevo VideoFilterModel
         */
        public VideoFilterModel()
        {
            super(null, new String[] {"", "Video"});
        }

        /**
         * Añade un nuevo vídeo al modelo.
         * @param v Video
         */
        public void addRow(Video v)
        {
            super.addRow(new Object[] {true, v});
        }

        /**
         * Comprueba si se puede editar una celda del modelo.
         * @param rowIndex Fila
         * @param mColIndex Columna
         * @return Verdadero si la celda es editable
         */
        @Override
        public boolean isCellEditable(int rowIndex, int mColIndex)
        {
            return true;
        }

        /**
         * Devuelve el tipo de dato de una columna del modelo.
         * @param column Columna
         * @return Clase
         */
        @Override
        public Class getColumnClass(int column)
        {
            switch (column)
            {
                case 0  : return Boolean.class;
                case 1  : return Video.class;
                default : return Object.class;
            }
        }

        /**
         * Devuelve el video que se encuentra en una fila.
         * @param row Fila
         * @return Video
         */
        public Video getVideo(final int row)
        {
            return (Video)getValueAt(row, 1);
        }

        /**
         * Indica si las imágenes pertencientes a un vídeo van a ser visibles
         * o no.
         * @param row Fila en la que esta el vídeo
         * @param b Visible o no visible
         */
        private void setVisible(int row, boolean b)
        {
            setValueAt(b, row, 0);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel imagePreviewPanel;
    private javax.swing.JScrollPane imageScroll;
    private javax.swing.JTable imageTable;
    private javax.swing.JPopupMenu imageTableMenu;
    private javax.swing.JLabel lblFoundImagesTotal;
    private javax.swing.JLabel lblFoundImagesTxt;
    private javax.swing.JLabel lblFoundImagesValue;
    private javax.swing.JPanel marcoFiltro;
    private javax.swing.JPanel marcoImagen;
    private javax.swing.JSpinner maxDiferencia;
    private javax.swing.JLabel maxDiferenciaLabel;
    private javax.swing.JMenuItem menuExclude;
    private javax.swing.JMenuItem menuOpenFolder;
    private javax.swing.JMenuItem menuOpenImage;
    private javax.swing.JMenuItem menuOpenVideoFolder;
    private javax.swing.JLabel searchedImage;
    private javax.swing.JTabbedPane searchedImagePanel;
    private javax.swing.JLabel searchedWavelet;
    private javax.swing.JTable videoFilter;
    private javax.swing.JScrollPane videoScroll;
    private javax.swing.JPanel waveletPreviewPanel;
    // End of variables declaration//GEN-END:variables

}
